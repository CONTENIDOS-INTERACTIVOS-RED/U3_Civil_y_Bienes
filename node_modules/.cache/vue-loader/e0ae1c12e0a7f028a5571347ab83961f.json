{"remainingRequest":"/home/runner/work/U3_Civil_y_Bienes/U3_Civil_y_Bienes/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Civil_y_Bienes/U3_Civil_y_Bienes/src/views/curso/Tema1.vue?vue&type=template&id=3b459e29&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Civil_y_Bienes/U3_Civil_y_Bienes/src/views/curso/Tema1.vue","mtime":1736470822608},{"path":"/home/runner/work/U3_Civil_y_Bienes/U3_Civil_y_Bienes/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Civil_y_Bienes/U3_Civil_y_Bienes/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Civil_y_Bienes/U3_Civil_y_Bienes/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Civil_y_Bienes/U3_Civil_y_Bienes/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Civil_y_Bienes/U3_Civil_y_Bienes/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}