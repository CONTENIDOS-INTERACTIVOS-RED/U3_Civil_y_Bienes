{"remainingRequest":"/home/runner/work/U3_Civil_y_Bienes/U3_Civil_y_Bienes/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Civil_y_Bienes/U3_Civil_y_Bienes/src/views/curso/Tema3.vue?vue&type=template&id=3c66c4cc&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Civil_y_Bienes/U3_Civil_y_Bienes/src/views/curso/Tema3.vue","mtime":1736470822608},{"path":"/home/runner/work/U3_Civil_y_Bienes/U3_Civil_y_Bienes/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Civil_y_Bienes/U3_Civil_y_Bienes/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Civil_y_Bienes/U3_Civil_y_Bienes/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Civil_y_Bienes/U3_Civil_y_Bienes/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Civil_y_Bienes/U3_Civil_y_Bienes/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMy4gQ29udHJhdG9zIHRyYXNsYXRpdm9zIGRlIGRvbWluaW8nIikKICAuY29udGFpbmVyLnRhcmpldGEudGFyamV0YS0tYmxhbmNhLnAtNC5wLW1kLTUub3ZlcmZsb3ctaGlkZGVuCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUoZGF0YS1hb3M9ImZhZGUtdXAiKQogICAgICAuY29sLWxnLTcubWItMwogICAgICAgIHAubWItMCBMb3MgY29udHJhdG9zIHRyYXNsYXRpdm9zIGRlIGRvbWluaW8sIHNvbiBhY3VlcmRvcyBsZWdhbGVzIG1lZGlhbnRlIGxvcyBjdWFsZXMgdW5hIHBlcnNvbmEsIGRlbm9taW5hZGEgZW5hamVuYW50ZSwgdHJhbnNmaWVyZSBsYSBwcm9waWVkYWQgZGUgdW4gYmllbiBhIG90cmEgcGVyc29uYSwgZGVub21pbmFkYSBhZHF1aXJlbnRlLCBhIGNhbWJpbyBkZSB1bmEgY29udHJhcHJlc3RhY2nDs24gbyBkZSBtYW5lcmEgZ3JhdHVpdGEuIEVzdG9zIGNvbnRyYXRvcyB0aWVuZW4gY29tbyBwcmluY2lwYWwgb2JqZXRpdm8sIGNhbWJpYXIgbGEgdGl0dWxhcmlkYWQgZGVsIGRvbWluaW8gZGUgdW4gYmllbiwgeWEgc2VhIGRlIG1hbmVyYSB0ZW1wb3JhbCBvIHBlcm1hbmVudGUsIHkgZXN0w6FuIHJlZ3VsYWRvcyBwb3IgcHJpbmNpcGlvcyBiw6FzaWNvcyBkZWwgZGVyZWNobyBjaXZpbCwgY29tbyBlbCBjb25zZW50aW1pZW50bywgbGEgY2FwYWNpZGFkIGRlIGxhcyBwYXJ0ZXMgeSBsYSBsaWNpdHVkIGRlbCBvYmpldG8uCiAgICAgIC5jb2wtbGctNQogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTMvMS5wbmcnLCBhbHQ9JycpCiAgICAKICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLmJnLXBwYWwtYXp1bC5wLTQubWItNQogICAgICAuY29sLWxnLWF1dG8oZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzIuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgLmNvbC1sZy5tYi0zCiAgICAgICAgcC5tYi0wIEVzdG9zIGNvbnRyYXRvcyBzb24gZnVuZGFtZW50YWxlcyBlbiBsYSB2aWRhIGp1csOtZGljYSB5IGVjb27Ds21pY2EsIHB1ZXN0byBxdWUgcGVybWl0ZW4gbGEgdHJhbnNmZXJlbmNpYSBmb3JtYWwgZGUgbGEgcHJvcGllZGFkLCBhc2VndXJhbmRvIGxhIHByb3RlY2Npw7NuIGRlIGxvcyBkZXJlY2hvcywgdGFudG8gZGVsIGVuYWplbmFudGUgY29tbyBkZWwgYWRxdWlyZW50ZS4gQWRlbcOhcywgc29uIGVzZW5jaWFsZXMgcGFyYSBnYXJhbnRpemFyIGxhIHNlZ3VyaWRhZCBqdXLDrWRpY2EgZW4gbGFzIHRyYW5zYWNjaW9uZXMgeSBldml0YXIgY29uZmxpY3RvcyBkZSB0aXR1bGFyaWRhZC4KICAgIAogICAgaDIubWItMyhkYXRhLWFvcz0iZmFkZS1yaWdodCIpIMK/Q3XDoWxlcyBzb24gbG9zIGNvbnRyYXRvcyB0cmFzbGF0aXZvcyBkZSBkb21pbmlvPwoKICAgIHAubWItNSBFeGlzdGVuIGRpdmVyc29zIHRpcG9zIGRlIGNvbnRyYXRvcyB0cmFzbGF0aXZvcyBkZSBkb21pbmlvLCBlbnRyZSBsb3MgY3VhbGVzIGRlc3RhY2FuIGxvcyBzaWd1aWVudGVzOgoKICAgCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy02CiAgICAgICAgVGFyamV0YUF1ZGlvLmNvbG9yLXByaW1hcmlvLmJnLWNvbG9yLXdoaXRlLm1iLTMoCiAgICAgICAgICB0ZXh0bz0iUHJvY2VzbyBkZSBkZXNjYXJnYSBkZSBNeVNRTCBTZXJ2ZXIgQ29tbXVuaXR5IHkgTXlTUUwgV29ya2JlbmNoIgogICAgICAgICAgdGllbXBvCiAgICAgICAgICA6YXVkaW89InJlcXVpcmUoJy4uLy4uL2Fzc2V0cy9jdXJzby9wb2RjYXN0L3BvZGNhc3QxLm1wMycpIgogICAgICAgICkKICAgIAogICAgaDIubWItNShkYXRhLWFvcz0iZmFkZS1yaWdodCIpIMK/Q3XDoW5kbyBzZSBhcGxpY2FuIGxvcyBjb250cmF0b3MgdHJhc2xhdGl2b3MgZGUgZG9taW5pbz8KCiAgICBwLm1iLTUgTG9zIGNvbnRyYXRvcyB0cmFzbGF0aXZvcyBkZSBkb21pbmlvIHNlIGFwbGljYW4gZW4gZGl2ZXJzYXMgc2l0dWFjaW9uZXMgZG9uZGUgbGFzIHBhcnRlcyBidXNjYW4gZm9ybWFsaXphciBsZWdhbG1lbnRlIGxhIHRyYW5zZmVyZW5jaWEgZGUgYmllbmVzLCBhc2VndXJhbmRvIHN1IHByb3RlY2Npw7NuIGJham8gbGEgbm9ybWF0aXZhIHZpZ2VudGUuIEVzdG9zIGNvbnRyYXRvcyBzb24gZXNlbmNpYWxlcyBwYXJhIGdhcmFudGl6YXIgbGEgc2VndXJpZGFkIGp1csOtZGljYSBlbiBsYXMgdHJhbnNhY2Npb25lcyBwYXRyaW1vbmlhbGVzLgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWZvbmRvLXNsaWRlci5tYi01CiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgU2x5ZGVyQSh0aXBvPSJiIikuYmctd2hpdGUoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAgICAgLnJvdy5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNS5tYi0zCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8zLnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg1IFRyYW5zYWNjaW9uZXMgY29tZXJjaWFsZXMgCiAgICAgICAgICAgICAgcCBDb21wcmF2ZW50YSBkZSBiaWVuZXMgaW5tdWVibGVzLCB2ZWjDrWN1bG9zIG8gcHJvZHVjdG9zIGluZHVzdHJpYWxlcy4KICAgICAgICAgICAgICAgCiAgICAgICAgICAucm93LnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01Lm1iLTMKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzQucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgVHJhbnNtaXNpw7NuIGdyYXR1aXRhIGRlIGJpZW5lcwogICAgICAgICAgICAgIHAgQ2VzacOzbiBzaW4gYmVuZWZpY2lvIGVjb27Ds21pY28sIGNvbW8gZW4gbGFzIGRvbmFjaW9uZXMuCiAgICAgICAgICAgICAgIAogICAgICAgICAgLnJvdy5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNS5tYi0zCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy81LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg1IEludGVyY2FtYmlvIGRlIGJpZW5lcwogICAgICAgICAgICAgIHAgUGVybXV0YSBkZSBiaWVuZXMgZW50cmUgZG9zIHBhcnRlcy4KICAgICAgICAgICAgICAgCiAgICAgICAgICAucm93LnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01Lm1iLTMKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzYucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgUHLDqXN0YW1vcyBkZSBiaWVuZXMgZnVuZ2libGVzCiAgICAgICAgICAgICAgcCBUcmFuc2ZlcmVuY2lhIHRlbXBvcmFsIGRlIGJpZW5lcyBjb25zdW1pYmxlcywgY29tbyBkaW5lcm8gdSBvdHJvcyBiaWVuZXMgZnVuZ2libGVzLgogICAgCiAgICAKICAgIGgyLm1iLTUoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBSZXF1aXNpdG9zIHBhcmEgc3UgdmFsaWRlegoKICAgIHAubWItNSBMb3MgcmVxdWlzaXRvcyBwYXJhIGxhIHZhbGlkZXogZGUgdW4gY29udHJhdG8sIGdhcmFudGl6YW4gcXVlIGxvcyBhY3VlcmRvcyBlbnRyZSBsYXMgcGFydGVzIGN1bXBsYW4gY29uIGxvcyBwcmluY2lwaW9zIGxlZ2FsZXMgeSDDqXRpY29zIG5lY2VzYXJpb3MgcGFyYSBzdSBlamVjdWNpw7NuLgoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01LmFsaWduLWl0ZW1zLWNlbnRlcihkYXRhLWFvcz0iZmFkZS11cCIpCiAgICAgIC5jb2wtbGctOAogICAgICAgIGRpdi5iZy1wcGFsLWF6dWwucC00LnB4LTUuaC0xMDAuYWxpZ24tY29udGVudC1jZW50ZXIKICAgICAgICAgIHVsLmxpc3RhLXVsKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgIGkubGlzdGEtdWxfX3ZpbmV0YQogICAgICAgICAgICAgIHAubWItMCA8Yj5Db25zZW50aW1pZW50byBkZSBsYXMgcGFydGVzOjwvYj4gYW1iYXMgcGFydGVzIGRlYmVuIG1hbmlmZXN0YXIgc3Ugdm9sdW50YWQgZGUgZm9ybWEgbGlicmUgeSBjbGFyYS4KICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICBpLmxpc3RhLXVsX192aW5ldGEKICAgICAgICAgICAgICBwLm1iLTAgPGI+T2JqZXRvIGRlbCBjb250cmF0bzo8L2I+IGRlYmUgc2VyIGzDrWNpdG8sIHN1c2NlcHRpYmxlIGRlIHNlciBwb3Nlw61kbyB5IGNvbWVyY2lhbGl6YWRvLgogICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgIGkubGlzdGEtdWxfX3ZpbmV0YQogICAgICAgICAgICAgIHAubWItMCA8Yj5DYXBhY2lkYWQganVyw61kaWNhOiA8L2I+IGxhcyBwYXJ0ZXMgaW52b2x1Y3JhZGFzIGRlYmVuIGNvbnRhciBjb24gbGEgY2FwYWNpZGFkIGxlZ2FsIHBhcmEgY29udHJhdGFyLgogICAgICAgICAgCiAgICAgICAgICBwLnRleHQtYm9sZCBGb3JtYWxpZGFkZXMgZXNwZWPDrWZpY2FzOgoKICAgICAgICAgIHVsLmxpc3RhLXVsLm1iLTAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgaS5saXN0YS11bF9fdmluZXRhCiAgICAgICAgICAgICAgcC5tYi0wIDxiPlBhcmEgYmllbmVzIG11ZWJsZXM6PC9iPiAgYWN1ZXJkbyBkZSBsYXMgcGFydGVzIHkgZW50cmVnYSBkZWwgYmllbiAodHJhZGljacOzbikuCiAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgaS5saXN0YS11bF9fdmluZXRhCiAgICAgICAgICAgICAgcC5tYi0wIDxiPlBhcmEgYmllbmVzIGlubXVlYmxlczo8L2I+ICBlc2NyaXR1cmEgcMO6YmxpY2EgeSBsYSBpbnNjcmlwY2nDs24gZW4gZWwgUmVnaXN0cm8gZGUgSW5zdHJ1bWVudG9zIFDDumJsaWNvcy4KCiAgICAgIC5jb2wtbGctNAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTMvNy5wbmcnLCBhbHQ9JycpCiAgICAKICAgIC50aXR1bG8tZmlndXJhLm1iLTQKICAgICAgaDUgVGFibGEgNC4gCiAgICAgIHNwYW4gVGlwb3MgZGUgY29udHJhdG9zIHRyYXNsYXRpdm9zIGRlIGRvbWluaW8gIAoKICAgIC50YWJsYS1hLmNvbG9yLXRlcmNpYXJpby5tYi01KGRhdGEtYW9zPSJ6b29tLWluIikgCiAgICAgIHRhYmxlCiAgICAgICAgdGhlYWQKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRoKHdpZHRoPSIyNSUiKS5iZy1jb2xvci00IFRpcG8gZGUgY29udHJhdG8KICAgICAgICAgICAgdGguYmctY29sb3ItNCBSZWd1bGFjacOzbgogICAgICAgICAgICB0aC5iZy1jb2xvci00IEFzcGVjdG9zIHJlbGV2YW50ZXMKICAgICAgICB0Ym9keQogICAgICAgICAgdHIuYmctY29sb3ItNQogICAgICAgICAgICB0ZCA8Yj5Db21wcmF2ZW50YTwvYj4KICAgICAgICAgICAgdGQgQXJ0w61jdWxvcyAxODQ5IHkgc2lndWllbnRlcyBkZWwgQ0MuCiAgICAgICAgICAgIHRkIFJlcXVpZXJlIGNsYXJpZGFkIGVuIGVsIHByZWNpbyB5IGNvbmRpY2lvbmVzIGRlIGVudHJlZ2EgZGVsIGJpZW4uCiAgICAgICAgICAgIAogICAgICAgICAgdHIuYmctY29sb3ItNQogICAgICAgICAgICB0ZCA8Yj5Eb25hY2nDs248L2I+IAogICAgICAgICAgICB0ZCBBcnTDrWN1bG9zIDE0NDMgeSBzaWd1aWVudGVzIGRlbCBDQy4KICAgICAgICAgICAgdGQgRXNjcml0dXJhIHDDumJsaWNhIG5lY2VzYXJpYSBwYXJhIGJpZW5lcyBpbm11ZWJsZXMuCiAgICAgICAgICB0ci5iZy1jb2xvci01CiAgICAgICAgICAgIHRkIDxiPlBlcm11dGE8L2I+IAogICAgICAgICAgICB0ZCBBcnTDrWN1bG9zIDE5NTUgeSBzaWd1aWVudGVzIGRlbCBDQy4KICAgICAgICAgICAgdGQgSW50ZXJjYW1iaW8gZGUgYmllbmVzIGNvbiByZWdsYXMgc2ltaWxhcmVzIGEgbGFzIGRlIGNvbXByYXZlbnRhLgogICAgICAgICAgdHIuYmctY29sb3ItNQogICAgICAgICAgICB0ZCA8Yj5NdXR1bzwvYj4gCiAgICAgICAgICAgIHRkIEFydMOtY3Vsb3MgMjIyMSB5IHNpZ3VpZW50ZXMgZGVsIENDLgogICAgICAgICAgICB0ZCBBcGxpY2FibGUgYSBiaWVuZXMgZnVuZ2libGVzLCBlc3RhYmxlY2Ugb2JsaWdhY2lvbmVzIGNsYXJhcyBkZSBkZXZvbHVjacOzbi4KICAgIAogICAgLmJnLWZ1bGwtd2lkdGguYmctZm9uZG8tMQogICAgICAucHgtNC5weC1tZC01LnBiLW1kLTMKCiAgICAgICAgaDIubWItNShkYXRhLWFvcz0iZmFkZS1yaWdodCIpIEFzcGVjdG9zIGxlZ2FsZXMgZW4gQ29sb21iaWEKCiAgICAgICAgcC5tYi01IExvcyBjb250cmF0b3MgdHJhc2xhdGl2b3MgZGUgZG9taW5pbyBlc3TDoW4gcmVndWxhZG9zIHBvciBlbCA8Yj5Dw7NkaWdvIENpdmlsPC9iPiB5IGVsIDxiPkPDs2RpZ28gZGUgQ29tZXJjaW88L2I+LCBkZXBlbmRpZW5kbyBkZWwgdGlwbyBkZSBiaWVuIHkgbGEgbmF0dXJhbGV6YSBkZSBsYSB0cmFuc2FjY2nDs24uIEFkZW3DoXMsIGRlYmVuIHJlc3BldGFyIHByaW5jaXBpb3MgY29uc3RpdHVjaW9uYWxlcyBjb21vOgoKICAgICAgICBkaXYucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtc3RyZXRjaC5tYi01CiAgICAgICAgICBkaXYuY29sLWxnLTMubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIGRpdi5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMC50YXJqZXRhCiAgICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KAogICAgICAgICAgICAgICAgc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy84LnN2ZyIKICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiA5MHB4IgogICAgICAgICAgICAgICkKICAgICAgICAgICAgICBwLnRleHQtY2VudGVyIDxiPkZ1bmNpw7NuIHNvY2lhbCBkZSBsYSBwcm9waWVkYWQ8L2I+IChBcnQuIDU4IGRlIGxhIENvbnN0aXR1Y2nDs24pLgoKICAgICAgICAgIAogICAgICAgICAgZGl2LmNvbC1sZy0zLm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAudGFyamV0YQogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNCgKICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvOS5zdmciCiAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogOTBweCIKICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgcC50ZXh0LWNlbnRlciA8Yj5FcXVpZGFkIGNvbnRyYWN0dWFsPC9iPiAoQXJ0LiAzMzMgZGUgbGEgQ29uc3RpdHVjacOzbikuCiAgICAKICAgIHAubWItNSBGb3JtYWxpZGFkZXMgc2Vnw7puIGVsIHRpcG8gZGUgYmllbiwgc29uOiAKCiAgICAuYmctY29sb3ItMS5tYi01KGRhdGEtYW9zPSJmYWRlLXVwIikKICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgIC5jb2wtbGcucC00LnB4LTUubWItMwogICAgICAgICAgdWwubGlzdGEtdWwubWItMChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICBpLmxpc3RhLXVsX192aW5ldGEKICAgICAgICAgICAgICBwLm1iLTAgPGI+QmllbmVzIG11ZWJsZXMuPC9iPiAgIEFjdWVyZG8gZW50cmUgbGFzIHBhcnRlcyB5IGVudHJlZ2EgZGVsIGJpZW4gKHRyYWRpY2nDs24pLgogICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgIGkubGlzdGEtdWxfX3ZpbmV0YQogICAgICAgICAgICAgIHAubWItMCA8Yj5CaWVuZXMgaW5tdWVibGVzLiA8L2I+ICBFc2NyaXR1cmEgcMO6YmxpY2EgZSBpbnNjcmlwY2nDs24gZW4gbGEgT2ZpY2luYSBkZSBSZWdpc3RybyBkZSBJbnN0cnVtZW50b3MgUMO6YmxpY29zLgogICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEzLzEwLnBuZycsIGFsdD0nJykKICAgIAogICAgcC50ZXh0LWJvbGQubWItNSBMYSBpbXBvcnRhbmNpYSBkZSBlc3RvcyBjb250cmF0b3Mgc2UgZnVuZGFtZW50YSBlbiBxdWU6IAoKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTMoZGF0YS1hb3M9ImZsaXAtZG93biIpCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMy8xMS5wbmcnLCBhbHQ9JycpCiAgICAgIC5jb2wtbGctMyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgICAgZGl2LnAtNC5iZy1jb2xvci13aGl0ZS5oLTEwMC5hbGlnbi1jb250ZW50LWNlbnRlci50YXJqZXRhLmJvcmRlcmZ1bGwKICAgICAgICAgIHAubWItMCBHYXJhbnRpemFuIGxhIDxiPnRyYW5zcGFyZW5jaWEgeSBsZWdhbGlkYWQ8L2I+IGVuIGxhcyB0cmFuc2ZlcmVuY2lhcyBwYXRyaW1vbmlhbGVzLgogICAgICAuY29sLWxnLTMoZGF0YS1hb3M9ImZsaXAtZG93biIpCiAgICAgICAgZGl2LnAtNC5iZy1jb2xvci13aGl0ZS5oLTEwMC5hbGlnbi1jb250ZW50LWNlbnRlci50YXJqZXRhLmJvcmRlcmZ1bGwKICAgICAgICAgIHAubWItMCBGb3J0YWxlY2VuIGxhIDxiPnNlZ3VyaWRhZCBqdXLDrWRpY2E8L2I+IHkgcHJvdGVnZW4gbG9zIGRlcmVjaG9zIGRlIGxhcyBwYXJ0ZXMuCiAgICAgIC5jb2wtbGctMyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgICAgZGl2LnAtNC5iZy1jb2xvci13aGl0ZS5oLTEwMC5hbGlnbi1jb250ZW50LWNlbnRlci50YXJqZXRhLmJvcmRlcmZ1bGwKICAgICAgICAgIHAubWItMCBDb250cmlidXllbiBhbCBiaWVuZXN0YXIgc29jaWFsLCByZXNwZXRhbmRvIGxvcyBwcmluY2lwaW9zIGNvbnN0aXR1Y2lvbmFsZXMuCiAgICAKICAgIHAubWItNSBFbiBjb25jbHVzacOzbiwgbG9zIGNvbnRyYXRvcyB0cmFzbGF0aXZvcyBkZSBkb21pbmlvIGVuIENvbG9tYmlhLCBzb24gaGVycmFtaWVudGFzIGZ1bmRhbWVudGFsZXMgcGFyYSBmb3JtYWxpemFyIHkgZ2FyYW50aXphciBsYSB0cmFuc2ZlcmVuY2lhIGRlIGJpZW5lcyBiYWpvIHVuIG1hcmNvIGRlIGVxdWlkYWQgeSBsZWdhbGlkYWQuIERlc2RlIHRyYW5zYWNjaW9uZXMgY29tZXJjaWFsZXMsIGhhc3RhIGRvbmFjaW9uZXMsIGVzdG9zIGNvbnRyYXRvcyBmb3J0YWxlY2VuIGxhIHNlZ3VyaWRhZCBlbiBsYXMgcmVsYWNpb25lcyBwYXRyaW1vbmlhbGVzIHkganVyw61kaWNhcy4KCiAgICAKICAgICAgICAgICAgCiAgICAuYmctZnVsbC13aWR0aC5ib3JkZXItdG9wLmNvbG9yLXByaW1hcmlvCiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIE1BVEVSSUFMIENPTVBMRU1FTlRBUklPCiAgICAgICAgLnJvdy5tYXRlcmlhbC1jb21wbGVtZW50YXJpbwogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctNwogICAgICAgICAgICBwIExvcyBpbnZpdGFtb3MgYSBleHBsb3JhciBlbCBtYXRlcmlhbCBjb21wbGVtZW50YXJpbyBkZSBlc3RlIGN1cnNvLCBlbiBlc3RhIHNlY2Npw7NuIGVuY29udHJhcsOhIHJlY3Vyc29zIHF1ZSBsZSBwZXJtaXRpcsOhbiBwcm9mdW5kaXphciAgeSBlbnJpcXVlY2VyIHN1IGFwcmVuZGl6YWplIGVuIGxvcyB0ZW1hcyB0cmF0YWRvcyBlbiBlc3RhIHVuaWRhZC4KCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vZWxpYnJvLm5ldC9lcy9sYy90ZWNub2xvZ2ljYWRlbG9yaWVudGUvdGl0dWxvcy8xMTc2MzAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBNZWRpbmEgUGFiw7NuLCBKLiBFLiAoMjAxOSkuIERlcmVjaG8gQ2l2aWwuIEJpZW5lcy4gRGVyZWNob3MgcmVhbGVzICgyIGVkLikuIEVkaXRvcmlhbCBVbml2ZXJzaWRhZCBkZWwgUm9zYXJpby4gCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vd3d3Lm1pbmp1c3RpY2lhLmdvdi5jby9wcm9ncmFtYXMtY28vTGVnYWxBcHAvUGFnaW5hcy9EZWNsYXJhY2klQzMlQjNuLWRlLXBlcnRlbmVuY2lhLmFzcHgjOn46dGV4dD0lMkQlMjBQcmVzY3JpcGNpJUMzJUIzbiUyMGFkcXVpc2l0aXZhJTIwb3JkaW5hcmlhOiUyMFBhcmElMjBsb3MsaW1wdWVzdG9zJTIweSUyMG1hbnRlbmltaWVudG8lMjBkZWwlMjBiaWVuKS4iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSDCv0PDs21vIG1lIHB1ZWRvIGNvbnZlcnRpciBlbiBkdWXDsW8gZGUgdW4gcHJlZGlvIHNvYnJlIGVsIGN1YWwgaGUgaGFiaXRhZG8gaGFjZSBtdWNobyB0aWVtcG8/IAogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3d3dy50aG9tc29ucmV1dGVycy5jbC9lcy1jbC9wcm9kdWN0b3MvaW5mb3JtYWNpb24tbGVnYWwtd2VzdGxhdyAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBQbGF0YWZvcm1hIHNvYnJlIGdlc3Rpw7NuIGLDoXNpY2EgZGVsIGRlcmVjaG8gCgogICAgICAgICAgIAoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaWNvbm8teXQuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ZXY2cUoya1B3YlEiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBNYXJpbyBWYXJlbGEgTGF3IEZpcm0uICgyMDIzKS4gUHJvdGVjY2nDs24gZGUgdHVzIGJpZW5lcy4KCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy0zLm9mZnNldC1sZy0xCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL21hdGVyaWFsLWNvbXBsZW1lbnRhcmlvLnN2ZycsIGFsdD0nJykKICAK"},null]}